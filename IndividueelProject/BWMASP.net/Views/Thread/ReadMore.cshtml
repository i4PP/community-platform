@model ThreadAndCommentsViewModel

@{
    ViewBag.Title = "ReadMore";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div>
    <a class="btn btn-primary m-3" asp-controller="Thread" asp-action="Index">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8" />
        </svg>
    </a>
</div>

<div>
    @if (TempData["Error"] != null)
    {
    <p class="text-danger">@TempData["Error"]</p>
    }
</div>

<div>
    <div class="container row">
        <div class="container col-2 bg-light border-end">
            <div class="d-flex flex-row pt-5 p-2">
                <div>
                    <h5 class="text-primary fw-bold text-sm-center">@Model.Thread.UserName</h5>
                    <p>Posted at: @Model.Thread.CreatedAt</p>
                </div>
            </div>
        </div>
        <div class="container col bg-light">
            <div class=" d-flex flex-row align-items-center justify-content-between">
                <h1 class="mb-4 mt-4">@Model.Thread.Title</h1>
                @if (Model.Thread.OwnerId == Context.Session.GetInt32("UserId"))
                {
                    <div class="dropdown">
                        <button class="btn bi-three-dots-vertical" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false" onclick="event.stopPropagation()">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                                <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/>
                            </svg>
                        </button>

                        <ul class="dropdown-menu overflow-hidden" aria-labelledby="dropdownMenuButton1">

                            <li>
                                <form asp-controller="Thread" asp-action="Edit" method="get">
                                    <button onclick="event.stopPropagation()" class="dropdown-item" name="threadId" value="@Model.Thread.ThreadId">Edit</button>
                                </form>
                            </li>
                            <li>
                                <button type="button" class="dropdown-item text-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                    Delete
                                </button>
                            </li>

                        </ul>
                    </div>
                }
            </div>
            <p class="pt-0 text-black-50">@Model.Thread.TopicName</p>
            <pre class="text-black">@Model.Thread.Text</pre>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Delete thread?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are u sure u want to delete the <b>@Model.Thread.Title </b> thread?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <form asp-controller="Thread" asp-action="Delete" method="post">
                        <button onclick="event.stopPropagation()" class="btn btn-danger" name="threadId" value="@Model.Thread.ThreadId">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    @if (Context.Session.GetInt32("UserId") != null)
    {
        @await Html.PartialAsync("_CreateComment", new CreateCommentViewModel { ThreadId = Model.Thread.ThreadId!.Value })
    }
</div>

<h3 class="ps-2 pt-3">Comments</h3>

<div class="pt-3">
    @foreach(var comment in Model.Comments)
    {
        <div class="container row">
            <div class="container col bg-light border">
                <div class="d-flex flex-row p-2 pt-3 align-items-center align-items-baseline">
                    <div class="pe-3">
                        <h5 class="text-primary fw-bold">@comment.OwnerName</h5>
                        <div class="d-flex flex-row align-items-center">
                            <p>@comment.DateCreated</p>
                        </div>
                    </div>
                    <div class="ps-3 border-start flex-grow-1"> <!-- Added flex-grow-1 to take remaining space -->
                        <p>@comment.Text</p>
                    </div>
                    <div class="ms-auto"> <!-- Added ms-auto class to push button to the right -->
                        <button style="transform: translate(0%,50%);" class="btn btn-secondary" onclick="loadCreateCommentPartial('@comment.CommentId')">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chat" viewBox="0 0 16 16">
                                <path d="M2.678 11.894a1 1 0 0 1 .287.801 11 11 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8 8 0 0 0 8 14c3.996 0 7-2.807 7-6s-3.004-6-7-6-7 2.808-7 6c0 1.468.617 2.83 1.678 3.894m-.493 3.905a22 22 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a10 10 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9 9 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105"/>
                            </svg>                      
                        </button>
                    </div>
                </div>

                @if (comment.ChildComments.Any())
                {
                    <hr class="my-2">
                    <div class="child-comments ps-5">
                        @foreach (var childComment in comment.ChildComments)
                        {
                            <div class="container row">
                                <div class="container col">
                                    <div class="d-flex flex-row  p-2 align-items-center">
                                        <div class="" style="min-width: 170px; max-width: 171px;">
                                            <h5 class="text-primary fw-bold">@childComment.OwnerName</h5>
                                            <div class="d-flex flex-row align-items-center">
                                                <p>@childComment.DateCreated</p>
                                            </div>
                                        </div>
                                        <div class="ps-3 border-start">
                                            <p>@childComment.Text</p>
                                        </div>
                                    </div>
                                </div>    
                            </div>       
                        }
                    </div>
                }
                <div id="createCommentContainer_@comment.CommentId"></div>
            </div>
        </div>
    }
</div>



<script>
    function loadCreateCommentPartial(commentId) {
        const container = document.getElementById('createCommentContainer_' + commentId);
    
        if (container.innerHTML.trim() !== '') {
            container.innerHTML = '';
            return;
        }
    
        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    container.innerHTML = xhr.responseText;
                } else {
                    console.error('Failed to load create comment partial');
                }
            }
        };
    
        xhr.open('POST', '/Thread/LoadCommentPartial', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify({
            threadId: parseInt(@Model.Thread.ThreadId!.Value),
            parentId: parseInt(commentId)
        }));
    }
</script>


<script>
    function showCommentControls() {
        document.getElementById('commentControls').style.display = 'block';
    }

    function setCommentTimestamp() {
        document.getElementById('commentTimestamp').value = new Date().toISOString();
    }
</script>






